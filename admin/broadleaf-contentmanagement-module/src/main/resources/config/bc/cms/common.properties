###
# #%L
# BroadleafCommerce CMS Module
# %%
# Copyright (C) 2009 - 2016 Broadleaf Commerce
# %%
# Licensed under the Broadleaf Fair Use License Agreement, Version 1.0
# (the "Fair Use License" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)
# unless the restrictions on use therein are violated and require payment to Broadleaf in which case
# the Broadleaf End User License Agreement (EULA), Version 1.1
# (the "Commercial License" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)
# shall apply.
# 
# Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the "Custom License")
# between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.
# #L%
###
#cms properties
# The following property defines the prefix used internally by the CMS system
# to identify requests that it needs to process
asset.server.url.prefix.internal=cmsstatic

#prefix used by cms for secure channel. Useful when your regular prefix begins with http:
asset.server.url.prefix.secure=

# When serving custom Pages or Structured Content fields, the url prefix defined
# above will be replaced with the string below.   This is useful for sites
# that have a separate image domain or use a CDN to render images.   This works well
# with CMS's that own the image part of your domain CNAME
asset.server.url.prefix=

# prefix in front of all urls that hit your storefront from the admin. This is useful
# when the storefront is located on a different server from the admin (e.g. http://storefront:8080/)
store.front.webapp.prefix=

# Cause cms sandbox items to be automatically approved without workflow (no longer used)
#automatically.approve.pages=true
#automatically.approve.structured.content=true

# controls whether or not the AssetService stores (and retrieves) the binary asset from the filesystem or database
asset.use.filesystem.storage=true

# Moved to broadleaf-common project
# asset.server.file.system.path=/broadleaf/assets
# asset.server.file.classpath.directory=

# URLs for images and other assets will be stored efficiently on the filesystem using a set of 
# generated directories based on the md5 value of the filename.   The number below will be used
# to determine the number of directories created.   2 supports a distribution of about 10 million 
# files and is suitable for most purposes.   Upping to 3 would add support for over 2 billion.  But
# for implementations of this size, distributed file system options should be considered.
asset.server.max.generated.file.system.directories=2

# The maximum file size that can be uploaded (10 Meg)
# Implementors should tune this according to their needs.
asset.server.max.uploadable.file.size=10000000

# The number of bytes from the input stream that will be read at a time
asset.server.file.buffer.size=8192

# Allows/disallows image manipulation through URL parameters and not only through named operations
asset.server.allow.unnamed.image.manipulation=false

# Max number of rows queried at a time by the PageSiteMapGenerator
page.site.map.generator.row.limit=100


# When a url redirect happens via the UrlHandlerFilter, if this property is true it will append the old
# query params to the new URL
preserveQueryStringOnRedirect=false

admin.image.file.extensions=bmp,jpg,jpeg,png,img,tiff,gif

