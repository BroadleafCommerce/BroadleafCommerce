###
# #%L
# BroadleafCommerce Common Libraries
# %%
# Copyright (C) 2009 - 2013 Broadleaf Commerce
# %%
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#       http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# #L%
###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%5p] %d{HH:mm:ss} %c{1} - %m%n

log4j.rootLogger=WARN, stdout

log4j.category.org.broadleafcommerce=INFO
log4j.category.org.springframework=WARN
log4j.category.org.hibernate=WARN

# NOTES:
# Below you will see two additional entries for logging.  Using either of those
# with the org.springframework entry above will allow you to set logging levels
# for org.springframework at WARN, but then more specifically, at the web level
# you can set logging at DEBUG (a more verbose level).
#
# The deeper you go into the package the more verbose you can get, but note that
# the higher package setting wins.  So if you set org.springframework to DEBUG
# and then set org.springframework.web to INFO, a less-verbose level, you will
# still get DEBUG in web.
#
#log4j.category.org.springframework.web=DEBUG
#log4j.category.org.springframework.web.servlet=DEBUG

# Here is some additional info on levels and logging
#
#    //printing methods:
#    public void trace(Object message);
#    public void debug(Object message);
#    public void info(Object message);
#    public void warn(Object message);
#    public void error(Object message);
#    public void fatal(Object message);

#    // generic printing method:
#    public void log(Level l, Object message);
#
#    Loggers may be assigned levels:
#    TRACE
#    DEBUG
#    INFO
#    WARN
#    ERROR
#    FATAL
